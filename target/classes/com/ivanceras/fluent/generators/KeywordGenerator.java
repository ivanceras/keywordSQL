package com.ivanceras.fluent.generators;

import java.util.Set;
import java.util.TreeSet;

import com.ivanceras.commons.writer.FileUtil;
import com.ivanceras.commons.writer.SourceWriter;
import com.ivanceras.commons.writer.StringSourceWriter;
import com.ivanceras.fluent.BaseSQL;
import com.ivanceras.fluent.SQL;

/**
 * Generate functions based on the keywords listed on the files
 * @author lee
 *
 */
public class KeywordGenerator {

	Set<String> uniques = new TreeSet<String>();
	private int totalKeywords = 0;

	public static void main(String[] args) {
		String postgresql = "./src/main/resources/postgresql_9.4_keywords.txt";
		String sqlite = "./src/main/resources/sqlite3_keywords.txt";
		String oracle = "./src/main/resources/oracle_keywords.txt";
		String mysql = "./src/main/resources/mysql5.0_keywords.txt";
		String mariadb = "./src/main/resources/mariadb_keywords.txt";
		KeywordGenerator generator = new KeywordGenerator(new String[]{postgresql, sqlite, oracle, mysql, mariadb});
		generator.start();
	}

	public KeywordGenerator(String[] files) {
		for(String file : files){
			addFile(file);
		}
	}


	void start(){
		generateKeywords();
		generateStatics();
	}

	void generateKeywords(){
		SourceWriter sw = new StringSourceWriter();
		sw.lnprint("package com.ivanceras.fluent;");
		sw.lnprint("/**");
		sw.lnprint("* DO NOT MODIFY - This code is generated by "+getClass().getCanonicalName()+"");
		sw.lnprint("*");
		sw.lnprint("*/");
		sw.lnprint("public abstract class Keywords extends Commons{");
		sw.lnprint();
		sw.lnprint();
		for(String keyword : uniques){
			String methodName = getmethodName(keyword);
			sw.lnTabPrint("public SQL "+methodName+"(){");
			sw.lnTabPrint("\treturn keyword(\""+keyword+"\");");
			sw.lnTabPrint("}");
		}
		sw.lnprint();
		sw.lnprint("}");
		FileUtil.writeToFile(sw.toString(), "./gen/src/com/ivanceras/fluent/", "Keywords.java");
		System.out.println(uniques.size()+" unique");
		int uniqueCount = uniques.size();
		int intersection = totalKeywords - uniqueCount;
		System.out.println(intersection+" common keywords");
		System.out.println(totalKeywords+" total keywords processed");

	}

	void generateStatics(){
		SourceWriter sw = new StringSourceWriter();
		sw.lnprint("package com.ivanceras.fluent;");
		sw.lnprint();
		sw.lnprint("/**");
		sw.lnprint("* DO NOT MODIFY - This code is generated by "+getClass().getCanonicalName()+"");
		sw.lnprint("*");
		sw.lnprint("*/");
		sw.lnprint();
		sw.lnprint("public class KeywordsStatics{");
		sw.lnprint();
		sw.lnprint();
		sw.lnTabPrint("private static SQL instance(){");
		sw.lnTabPrint("\treturn new SQL();");
		sw.lnTabPrint("}");
		sw.lnprint();
		for(String keyword : uniques){
			String methodName = getmethodName(keyword);
			sw.lnTabPrint("public static SQL "+methodName+"(){");
			sw.lnTabPrint("\treturn instance()."+methodName+"();");
			sw.lnTabPrint("}");
		}
		sw.lnprint();
		sw.lnprint("}");
		FileUtil.writeToFile(sw.toString(), "./gen/src/com/ivanceras/fluent/", "KeywordsStatics.java");
	}
	
	private String getmethodName(String keyword){
		return keyword.replace("-", "_");
	}

	void addFile(String file){
		String keywords = FileUtil.readFile(file);
		String[] splinters = keywords.split("\\s+");
		System.out.println(splinters.length+" keywords from "+file);
		totalKeywords  += splinters.length;
		for(String splinter : splinters){
			uniques.add(splinter);
		}
	}
}
